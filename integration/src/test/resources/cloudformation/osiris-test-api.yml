Resources:

  StaticFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: io.github.cjkent.osiris.osiris-test-api.static-files

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: osiris-test-api
      Description: A test API
      FailOnWarnings: true

  Resource0GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "helloworld"

  Resource1GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource1
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource2:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "helloplain"

  Resource2GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource2
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource3:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "hello"

  Resource4:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource3
      PathPart: "queryparam1"

  Resource4GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource4
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource5:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource3
      PathPart: "queryparam2"

  Resource5GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource5
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource6:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource3
      PathPart: "env"

  Resource6GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource6
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource7:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource3
      PathPart: "{name}"

  Resource7GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource7
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource8:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "foo"

  Resource8POST:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref Resource8
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource9:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource8
      PathPart: "{fooId}"

  Resource9GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource9
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource10:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "forbidden"

  Resource10GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource10
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource11:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "servererror"

  Resource11GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource11
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion}/invocations

  Resource12:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "public"

  Resource12GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource12
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/io.github.cjkent.osiris.osiris-test-api.static-files/index.html
        Credentials: !GetAtt FunctionRole.Arn
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Length: integration.response.header.Content-Length
          - StatusCode: 403
            SelectionPattern: 403
          - StatusCode: 404
            SelectionPattern: 404
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Content-Length: true
        - StatusCode: 403
        - StatusCode: 404

  Resource13:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref Resource12
      PathPart: "{proxy+}"

  Resource13GET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref Resource13
      RestApiId: !Ref Api
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/io.github.cjkent.osiris.osiris-test-api.static-files/{object}
        Credentials: !GetAtt FunctionRole.Arn
        RequestParameters:
          integration.request.path.object: method.request.path.proxy
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Length: integration.response.header.Content-Length
          - StatusCode: 403
            SelectionPattern: 403
          - StatusCode: 404
            SelectionPattern: 404
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Content-Length: true
        - StatusCode: 403
        - StatusCode: 404

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.github.cjkent.osiris.aws.ProxyLambda::handle
      Runtime: java8
      MemorySize: 512
      Timeout: 5
      Environment:
        Variables:
          API_COMPONENTS_CLASS: io.github.cjkent.osiris.integration.TestComponentsImpl
          API_DEFINITION_CLASS: io.github.cjkent.osiris.integration.IntegrationTestApiDefinition
          ENV_VAR: "envVarValue"
      Code:
        S3Bucket: io.github.cjkent.osiris.osiris-test-api.code
        S3Key: osiris-test-api-0.3.0-SNAPSHOT-jar-with-dependencies.jar
      Role: !GetAtt FunctionRole.Arn

  FunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt Function.Arn

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # todo this needs to be a policy with S3 list permissions so unknown static files return 404 not 403
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  FunctionRolePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FunctionVersion
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - Resource0GET
      - Resource1GET
      - Resource2GET
      - Resource4GET
      - Resource5GET
      - Resource6GET
      - Resource7GET
      - Resource8POST
      - Resource9GET
      - Resource10GET
      - Resource11GET
      - Resource12GET
      - Resource13GET
    Properties:
      RestApiId: !Ref Api

  Stagedev:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref Api
      Description: The dev stage
      DeploymentId: !Ref Deployment
      Variables:
        "foo": "devFoo"
        "bar": "devBar"

  Stageprod:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref Api
      Description: The prod stage
      DeploymentId: !Ref Deployment
      Variables:
        "foo": "prodFoo"
        "bar": "prodBar"

Outputs:
  ApiId:
    Description: ID of the API Gateway API
    Value: !Ref Api
  LambdaArn:
    Description: ARN of the lambda function
    Value: !GetAtt Function.Arn
  LambdaVersionArn:
    Description: ARN of the lambda function version
    Value: !GetAtt FunctionVersion.Arn
